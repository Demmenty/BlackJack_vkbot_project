import typing
from asyncio import sleep as asleep
from logging import getLogger

from app.store.vk_api.dataclasses import BotMessage, Keyboard, Update

from .buttons import GameButtons

if typing.TYPE_CHECKING:
    from app.web.app import Application


class GameManager:
    """—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º, —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å –∏–≥—Ä–æ–π"""

    def __init__(self, app: "Application"):
        self.app = app
        self.button = GameButtons()
        self.logger = getLogger("handler")

    async def offer_to_play(self, update: Update) -> None:
        """–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∏–≥—Ä–∞—Ç—å"""

        # TODO –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∏–≥—Ä–∞ –Ω–µ –∏–¥–µ—Ç
        # TODO –ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –≤ –±–µ—Å–µ–¥–µ —É–∂–µ –±—ã–ª–∞ –∏–≥—Ä–∞ -> —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        msg = BotMessage(
            peer_id=update.peer_id,
            text="–°—ã–≥—Ä–∞–µ–º –≤ BlackJack? üòâ",
            keyboard=Keyboard(buttons=[[self.button.start, self.button.rules]]).json,
        )
        await self.app.store.vk_api.send_message(msg)

    async def new_game(self, update: Update) -> None:
        """–Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –∏–≥—Ä—ã"""

        # –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∏–≥—Ä–∞ –Ω–µ –∏–¥–µ—Ç
        game = await self.app.store.game.get_by_peer(update.peer_id)

        if game.state != "inactive":
            msg = BotMessage(
                peer_id=update.peer_id,
                text=("–ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç, –∞–ª–ª–æ ü§®"),
            )
            await self.app.store.vk_api.send_message(msg)

        else:
            msg = BotMessage(
                peer_id=update.peer_id,
                text=("–î–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –±–∏—Ç–≤–∞! %0A" + "–í–µ—Å—å —á–∞—Ç –≤ —Ç—Ä—É—Ö—É! %0A"),
            )
            await self.app.store.vk_api.send_message(msg)
            await asleep(3)

            # TODO –∫–Ω–æ–ø–∫–∞ –æ—Ç–∫–∞–∑–∞, —á—Ç–æ–±—ã –Ω–µ –∂–¥–∞—Ç—å:
            # –ø—Ä–æ—Å—å–±–∞ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º -> –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–µ—Å–µ–¥—ã -> —Å—Ä–∞–≤–Ω–∏—Ç—å
            msg = BotMessage(
                peer_id=update.peer_id,
                text=("–ö—Ç–æ –±—É–¥–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å? %0A" + "–ñ–¥—É –∑–∞—è–≤–æ–∫ 15 —Å–µ–∫—É–Ω–¥..."),
                keyboard=Keyboard(
                    buttons=[[self.button.acceptgame, self.button.abort]]
                ).json,
            )
            await self.app.store.vk_api.send_message(msg)
            await self.app.store.game.change_state(game.id, "define_players")

            # TODO –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä


    async def game_rules(self, update: Update) -> None:
        """–æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –∏–≥—Ä—ã"""

        # TODO –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã -> –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ "inactive"

        msg = BotMessage(
            peer_id=update.peer_id,
            text=(
                "–í –≥—É–≥–ª–µ –∑–∞–±–∞–Ω–∏–ª–∏? %0A%0A" + "https://ru.wikihow.com/–∏–≥—Ä–∞—Ç—å-–≤-–±–ª—ç–∫–¥–∂–µ–∫"
            ),
            keyboard=Keyboard(buttons=[[self.button.start_already]]).json,
        )
        await self.app.store.vk_api.send_message(msg)
