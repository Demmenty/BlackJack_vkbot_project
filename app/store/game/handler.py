import typing
from logging import getLogger

from app.store.game.buttons import GameButton
from app.store.game.decks import EndlessDeck
from app.store.game.notifications import GameNotifier
from app.store.game.phrases import GamePhrase
from app.store.game.decorators import (
    game_must_be_off,
    game_must_be_on,
    game_must_be_on_state,
)
from app.store.vk_api.dataclasses import BotMessage, Keyboard, Update

if typing.TYPE_CHECKING:
    from app.web.app import Application


class GameHandler:
    """–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞"""

    def __init__(self, app: "Application"):
        self.app = app
        self.notifier = GameNotifier(app)
        self.deck = EndlessDeck()
        self.logger = getLogger("handler")

    @game_must_be_off
    async def send_game_offer(self, update: Update) -> None:
        """–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–∏–≥—Ä–∞—Ç—å"""

        await self.notifier.game_offer(update.peer_id)

    @game_must_be_off
    async def start_game(self, update: Update) -> None:
        """–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã"""
        # TODO –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è last_game
        # TODO –Ω–µ—Ç last_game > –≤–∞—Ä–∏–∞–Ω—Ç "–¥—Ä—É–≥–∏–º —Å–æ—Å—Ç–∞–≤–æ–º"
        # TODO –µ—Å–ª–∏ last_game > –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞

        # TODO –≤–∞—Ä–∏–∞–Ω—Ç—ã:
        # "—Ç–µ–º –∂–µ —Å–æ—Å—Ç–∞–≤–æ–º" > define –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –≤ betting –±–µ–∑ waiting
        # "–¥—Ä—É–≥–∏–º —Å–æ—Å—Ç–∞–≤–æ–º" > –≤—Å–µ –∏–≥—Ä–æ–∫–∏ inactive > —Å—Ç–∞–¥–∏—è define
        # "—Å–æ–≤—Å–µ–º –∑–∞–Ω–æ–≤–æ" > –≤—Å–µ –∏–≥—Ä–æ–∫–∏ inactive –∏ cash –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π > —Å—Ç–∞–¥–∏—è define

        await self.app.store.game_manager.start_game(update.peer_id)

    @game_must_be_on
    @game_must_be_on_state("define_players")
    async def register_player(self, update: Update) -> None:
        """—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏–≥—Ä–æ–∫–∞"""

        game = await self.app.store.game.get_game_by_peer_id(update.peer_id)

        # TODO —Å–¥–µ–ª–∞—Ç—å –∫–∞–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        vk_user = await self.app.store.game.get_or_create_vk_user(
            update.from_id
        )
        player, player_created = await self.app.store.game.get_or_create_player(
            vk_user.id, game.id
        )

        if player.cash == 0:
            await self.notifier.no_cash(update.peer_id, vk_user.name)
            return

        if player_created:
            await self.notifier.player_registered(update.peer_id, vk_user.name)
        elif player.is_active:
            await self.notifier.player_registered_already(
                update.peer_id, vk_user.name
            )
        else:
            await self.app.store.game.set_player_state(player.id, True)
            await self.notifier.player_registered(update.peer_id, vk_user.name)

    @game_must_be_on
    @game_must_be_on_state("define_players", "betting")
    async def unregister_player(self, update: Update) -> None:
        """–æ—Ç–º–µ—á–∞–µ—Ç –∏–≥—Ä–æ–∫–∞ –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ"""
        # TODO –≤—ã–Ω–µ—Å—Ç–∏ c—Ç–µ–π—Ç—ã –≤ –µ–Ω–∞–º, –¥–∞-–¥–∞

        game = await self.app.store.game.get_game_by_peer_id(update.peer_id)

        player = await self.app.store.game.get_player_by_vk_and_game(
            update.from_id, game.id
        )
        name = await self.app.store.game.get_player_name(player.id)

        if player.bet:
            await self.app.store.game.set_player_bet(player.id, None)

        await self.app.store.game.set_player_state(player.id, False)
        await self.notifier.player_unregistered(update.peer_id, name)

    @game_must_be_on
    @game_must_be_on_state("betting")
    async def accept_bet(self, update: Update) -> None:
        """–ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞–≤–∫—É –∏–≥—Ä–æ–∫–∞"""

        game = await self.app.store.game.get_game_by_peer_id(update.peer_id)

        player = await self.app.store.game.get_player_by_vk_and_game(
            update.from_id, game.id
        )

        if not player:
            return

        name = await self.app.store.game.get_player_name(player.id)

        if player.bet:
            await self.notifier.bet_accepted_already(
                update.peer_id, name, player.bet
            )
            return

        # TODO –≤—ã–Ω–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –∫—É–¥–∞-—Ç–æ
        if update.text == "–≤–∞-–±–∞–Ω–∫!":
            bet = player.cash
        else:
            bet = int(update.text)

            # –∏–≥—Ä–æ–∫–∏ —Å –Ω—É–ª–µ–º –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è –∫ –∏–≥—Ä–µ üòé
            if bet == 0:
                await self.notifier.zero_bet(update.peer_id, name)
                return

            if bet > player.cash:
                await self.notifier.to_much_bet(update.peer_id, name)
                return

        await self.app.store.game.set_player_bet(player.id, bet)
        await self.notifier.bet_accepted(update.peer_id, name, bet)

        # TODO check: –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ -> cancel waiting_bets -> start_dealing

    @game_must_be_on
    @game_must_be_on_state("dealing")
    async def deal_more_card(self, update: Update) -> None:
        """–≤—ã–¥–∞–µ—Ç –∏–≥—Ä–æ–∫—É –µ—â–µ –æ–¥–Ω—É –∫–∞—Ä—Ç—É"""

        game = await self.app.store.game.get_game_by_peer_id(update.peer_id)
        player = await self.app.store.game.get_player_by_vk_and_game(
            update.from_id, game.id
        )

        if not player:
            return

        if game.current_player_id != player.id:
            name = await self.app.store.game.get_player_name(player.id)
            await self.notifier.not_your_turn(update.peer_id, name)
            return

        await self.app.store.game_manager.deal_cards_to_player(
            1, update.peer_id, game.id, player.id
        )

    @game_must_be_on
    @game_must_be_on_state("dealing")
    async def stop_dealing_cards(self, update: Update) -> None:
        """–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–∑–¥–∞—á—É –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫—É –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç —Ö–æ–¥ —Å–ª–µ–¥—É—é—â–µ–º—É"""

        game = await self.app.store.game.get_game_by_peer_id(update.peer_id)
        player = await self.app.store.game.get_player_by_vk_and_game(
            update.from_id, game.id
        )

        if not player:
            return

        if game.current_player_id != player.id:
            name = await self.app.store.game.get_player_name(player.id)
            await self.notifier.not_your_turn(update.peer_id, name)
            return

        await self.app.store.game_manager.set_next_player_turn(
            update.peer_id, game.id
        )

    @game_must_be_on
    async def send_player_hand(self, update: Update) -> None:
        """–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —á–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–∞—Ö –≤ —Ä—É–∫–µ –∏–≥—Ä–æ–∫–∞"""

        # TODO —Å–¥–µ–ª–∞—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º

        game = await self.app.store.game.get_game_by_peer_id(update.peer_id)
        player = await self.app.store.game.get_player_by_vk_and_game(
            update.from_id, game.id
        )
        if not player:
            return

        hand = player.hand["cards"]
        name = await self.app.store.game.get_player_name(player.id)
        await self.notifier.player_hand(update.peer_id, name, hand)

    async def send_player_cash(self, update: Update) -> None:
        """–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —á–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ –∏–≥—Ä–æ–∫–∞, —Å–¥–µ–ª–∞–≤—à–µ–≥–æ —Ç–∞–∫–æ–π –∑–∞–ø—Ä–æ—Å"""

        # TODO —Å–¥–µ–ª–∞—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–∏–º (sendMessageEventAnswer > show_snackbar)

        game = await self.app.store.game.get_game_by_peer_id(update.peer_id)
        player = await self.app.store.game.get_player_by_vk_and_game(
            update.from_id, game.id
        )
        name = await self.app.store.vk_api.get_username(update.from_id)

        if not player:
            await self.notifier.not_a_player(update.peer_id, name)
            return

        await self.notifier.show_cash(update.peer_id, name, player.cash)

    async def send_game_rules(self, update: Update) -> None:
        """–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —á–∞—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –∏–≥—Ä—ã"""
        # TODO —Å–¥–µ–ª–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª
        # TODO —á–µ–∫–Ω—É—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º—ã—Ö –ø—Ä–∏ —ç—Ç–æ–º –∫–Ω–æ–ø–æ–∫, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤—Å—è–∫–æ–≥–æ
        # TODO –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞–¥–∏–∏ –∏–≥—Ä—ã

        msg = BotMessage(
            peer_id=update.peer_id,
            text=GamePhrase.rules,
            keyboard=Keyboard(buttons=[[GameButton.start]]).json,
        )
        await self.app.store.vk_api.send_message(msg)

    @game_must_be_on
    @game_must_be_on_state("define_players", "betting")
    async def abort_game(self, update: Update) -> None:
        """–æ—Ç–º–µ–Ω—è–µ—Ç –∏–≥—Ä—É (–Ω–∏–∫–∞–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)"""

        game = await self.app.store.game.get_game_by_peer_id(update.peer_id)
        causer = await self.app.store.vk_api.get_username(update.from_id)
        await self.app.store.game_manager.abort_game(
            update.peer_id, game.id, causer
        )

    @game_must_be_on
    @game_must_be_on_state("dealing")
    async def cancel_game(self, update: Update) -> None:
        """–¥–æ—Å—Ä–æ—á–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–≥—Ä—É (—Å –≤—ã–≤–æ–¥–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)"""

        game = await self.app.store.game.get_game_by_peer_id(update.peer_id)
        causer = await self.app.store.vk_api.get_username(update.from_id)
        await self.app.store.game_manager.stop_game(
            update.peer_id, game.id, causer
        )
